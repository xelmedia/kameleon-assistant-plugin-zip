variables:
  GITHUB_REPO: "xelmedia/kameleon-assistant-plugin-zip"
  PLUGIN_NAME: "zilch-assistant"

stages:
  - mirror
  - release

mirror_to_github:
  stage: mirror
  script:
    - git config --global http.postBuffer 157286400
    - git clone --mirror $CI_REPOSITORY_URL ./repo-mirror
    - cd ./repo-mirror
    - git remote add github https://oauth2:${GITHUB_TOKEN}@github.com/xelmedia/kameleon-assistant-plugin-zip.git
    - git push --force github refs/heads/*:refs/heads/*
    - git push --force github refs/tags/*:refs/tags/*
  only:
    - master
    - tags

github_release:
  stage: release
  script:
    - which curl || echo "curl is required"
    - which jq || echo "jq is required"
    
    # Debug: Print file existence and size
    - ls -l ${PLUGIN_NAME}.zip || echo "Zip file not found"
    
    # Create GitHub Release using API
    - |
      GITHUB_API="https://api.github.com/repos/${GITHUB_REPO}"
      echo "Creating release for tag ${CI_COMMIT_TAG}"
      
      # Create release
      RELEASE_RESPONSE=$(curl -s -X POST \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Accept: application/vnd.github.v3+json" \
        ${GITHUB_API}/releases \
        -d "{
          \"tag_name\": \"${CI_COMMIT_TAG}\",
          \"name\": \"Release ${CI_COMMIT_TAG}\",
          \"body\": \"Release ${CI_COMMIT_TAG}\",
          \"draft\": false,
          \"prerelease\": false
        }")
      
      # Debug: Print release response
      echo "Release response:"
      echo "${RELEASE_RESPONSE}"
      
      # Extract release ID and check if it exists
      RELEASE_ID=$(echo ${RELEASE_RESPONSE} | jq -r '.id')
      
      if [ "${RELEASE_ID}" = "null" ]; then
        echo "Failed to get release ID"
        exit 1
      fi
      
      echo "Release ID: ${RELEASE_ID}"
      
      # Upload the asset
      echo "Uploading asset ${PLUGIN_NAME}.zip"
      UPLOAD_URL="https://uploads.github.com/repos/${GITHUB_REPO}/releases/${RELEASE_ID}/assets?name=${PLUGIN_NAME}.zip"
      
      curl -s -X POST \
        -H "Authorization: token ${GITHUB_TOKEN}" \
        -H "Content-Type: application/zip" \
        -H "Accept: application/vnd.github.v3+json" \
        --data-binary "@${PLUGIN_NAME}.zip" \
        "${UPLOAD_URL}"
  only:
    - tags
